"use strict";(self.webpackChunklimo_cobot_documentation=self.webpackChunklimo_cobot_documentation||[]).push([[9255],{25040:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"core-concepts/manipulation","title":"Manipulation Basics","description":"Robotic manipulation is the art and engineering of controlling an arm and gripper to interact with the physical world.","source":"@site/docs/core-concepts/manipulation.md","sourceDirName":"core-concepts","slug":"/core-concepts/manipulation","permalink":"/limo_cobot_documentation/docs/core-concepts/manipulation","draft":false,"unlisted":false,"editUrl":"https://github.com/krish-rRay23/limo_cobot_documentation/tree/main/docs/core-concepts/manipulation.md","tags":[],"version":"current","lastUpdatedBy":"Krish Ray","lastUpdatedAt":1754637033000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Manipulation Basics"},"sidebar":"tutorialSidebar","previous":{"title":"Waypoint Navigation","permalink":"/limo_cobot_documentation/docs/core-concepts/navigation"},"next":{"title":"Object Detection Pipeline","permalink":"/limo_cobot_documentation/docs/core-concepts/object-detection"}}');var o=r(74848),i=r(28453),t=r(27293),l=r(11470),a=r(19365);const c={sidebar_position:5,title:"Manipulation Basics"},d="\ud83e\udd16 Manipulation Basics",p={},h=[{value:"\ud83e\uddbe Manipulation Fundamentals",id:"-manipulation-fundamentals",level:2},{value:"<strong>Key Concepts</strong>",id:"key-concepts",level:3},{value:"\ud83e\uddbf Arm Control Strategies",id:"-arm-control-strategies",level:2},{value:"\u270b Gripper Operations",id:"-gripper-operations",level:2},{value:"<strong>Basic Gripper Commands</strong>",id:"basic-gripper-commands",level:3},{value:"<strong>Gripper Control Strategies</strong>",id:"gripper-control-strategies",level:3},{value:"<strong>Gripper Feedback</strong>",id:"gripper-feedback",level:3},{value:"\ud83d\ude80 Pick and Place Workflow",id:"-pick-and-place-workflow",level:2},{value:"<strong>Full Pick and Place Operation</strong>",id:"full-pick-and-place-operation",level:3},{value:"\ud83d\udd0c Integration with System Components",id:"-integration-with-system-components",level:2},{value:"<strong>How Manipulation Fits In</strong>",id:"how-manipulation-fits-in",level:3},{value:"<strong>Node Communication</strong>",id:"node-communication",level:3},{value:"\ud83d\udee0\ufe0f Configuration and Calibration",id:"\ufe0f-configuration-and-calibration",level:2},{value:"<strong>Arm Workspace Definition</strong>",id:"arm-workspace-definition",level:3},{value:"<strong>Safety Parameters</strong>",id:"safety-parameters",level:3},{value:"\ud83d\udca1 Best Practices &amp; Troubleshooting",id:"-best-practices--troubleshooting",level:2},{value:"<strong>Safety Guidelines</strong>",id:"safety-guidelines",level:3},{value:"<strong>Common Issues &amp; Solutions</strong>",id:"common-issues--solutions",level:3},{value:"\ud83c\udfaf Advanced Manipulation Features",id:"-advanced-manipulation-features",level:2},{value:"<strong>Vision-Guided Grasping</strong>",id:"vision-guided-grasping",level:3},{value:"<strong>Collaborative Operation</strong>",id:"collaborative-operation",level:3},{value:"\ud83d\udcda Learn More",id:"-learn-more",level:2},{value:"\ud83c\udfaf Next Steps",id:"-next-steps",level:2}];function j(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-manipulation-basics",children:"\ud83e\udd16 Manipulation Basics"})}),"\n",(0,o.jsxs)(n.p,{children:["Robotic manipulation is the art and engineering of ",(0,o.jsx)(n.strong,{children:"controlling an arm and gripper"})," to interact with the physical world.",(0,o.jsx)(n.br,{}),"\n","In your project, manipulation allows your robot to ",(0,o.jsx)(n.strong,{children:"pick up, transport, and drop objects"})," with the MyCobot arm\u2014enabling true autonomy."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-manipulation-fundamentals",children:"\ud83e\uddbe Manipulation Fundamentals"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Manipulation"})," combines three key components:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Perception:"})," Detect object pose using sensors/cameras"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Planning:"})," Calculate motions for reaching, grasping, and moving"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Control:"})," Send joint or Cartesian commands to the arm and gripper"]}),"\n"]}),"\n",(0,o.jsx)(n.mermaid,{value:"flowchart TD\r\n    Detect[Object Detection<br/>Camera + AI]\r\n    Plan[Motion Planning<br/>Path Calculation]\r\n    Control[Arm Control<br/>Joint Commands]\r\n    Gripper[Gripper Control<br/>Open/Close]\r\n    \r\n    Detect --\x3e Plan\r\n    Plan --\x3e Control\r\n    Control --\x3e Gripper\r\n    Gripper --\x3e Done[Task Complete]\r\n    \r\n    Plan -.->|Safety Check| Control\r\n    Control -.->|Feedback| Plan"}),"\n",(0,o.jsx)(n.h3,{id:"key-concepts",children:(0,o.jsx)(n.strong,{children:"Key Concepts"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Concept"}),(0,o.jsx)(n.th,{children:"Description"}),(0,o.jsx)(n.th,{children:"Example"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Forward Kinematics"})}),(0,o.jsx)(n.td,{children:"Joint angles \u2192 end-effector pose"}),(0,o.jsx)(n.td,{children:'"If joints are [30\xb0, 45\xb0, 60\xb0], where is the gripper?"'})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Inverse Kinematics"})}),(0,o.jsx)(n.td,{children:"End-effector pose \u2192 joint angles"}),(0,o.jsx)(n.td,{children:'"To reach (x, y, z), what joint angles needed?"'})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Workspace"})}),(0,o.jsx)(n.td,{children:"Volume the arm can reach"}),(0,o.jsx)(n.td,{children:"Spherical region around robot base"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Singularities"})}),(0,o.jsx)(n.td,{children:"Arm configurations to avoid"}),(0,o.jsx)(n.td,{children:"Fully extended or folded positions"})]})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-arm-control-strategies",children:"\ud83e\uddbf Arm Control Strategies"}),"\n",(0,o.jsx)(n.p,{children:"In your LIMO + MyCobot project, control happens at several levels:"}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsxs)(a.A,{value:"joint",label:"Joint Control",default:!0,children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Move each joint to a target angle"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example joint control\r\njoint_angles = [0.0, -90.0, 45.0, 0.0, 45.0, 0.0]  # degrees\r\nmycobot.send_angles(joint_angles, speed=50)\n"})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Pros:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u2705 Direct hardware control"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Fast execution"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Predictable motion"}),"\n"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Cons:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u274c Requires manual calculation"}),"\n",(0,o.jsx)(n.li,{children:"\u274c Hard to visualize end result"}),"\n"]})]}),(0,o.jsxs)(a.A,{value:"pose",label:"Pose Control",children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Move the end effector (gripper) to a 3D pose"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example Cartesian control\r\ntarget_pose = [150, 100, 200, 0, 0, 0]  # [x, y, z, rx, ry, rz]\r\nmycobot.send_coords(target_pose, speed=50, mode=0)\n"})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Pros:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u2705 Intuitive positioning"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Direct spatial control"}),"\n",(0,o.jsx)(n.li,{children:"\u2705 Easy to visualize"}),"\n"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Cons:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\u274c May hit singularities"}),"\n",(0,o.jsx)(n.li,{children:"\u274c Slower computation"}),"\n"]})]}),(0,o.jsxs)(a.A,{value:"sequence",label:"Pick-and-Place Sequences",children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Pre-programmed or dynamic sequences"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example pick sequence\r\ndef pick_object(object_pose):\r\n    # 1. Move to pre-grasp pose (safe approach)\r\n    pre_grasp = [object_pose[0], object_pose[1], object_pose[2] + 50, 0, 0, 0]\r\n    mycobot.send_coords(pre_grasp, speed=30)\r\n    \r\n    # 2. Open gripper\r\n    mycobot.set_gripper_state(0, speed=70)  # 0 = open\r\n    \r\n    # 3. Move to grasp pose\r\n    mycobot.send_coords(object_pose, speed=20)\r\n    \r\n    # 4. Close gripper\r\n    mycobot.set_gripper_state(1, speed=70)  # 1 = close\r\n    \r\n    # 5. Lift object\r\n    lift_pose = [object_pose[0], object_pose[1], object_pose[2] + 100, 0, 0, 0]\r\n    mycobot.send_coords(lift_pose, speed=30)\n"})})]})]}),"\n",(0,o.jsx)(t.A,{type:"info",title:"Pro Tip",children:(0,o.jsx)(n.p,{children:"Use WiFi connection for MyCobot for seamless control\u2014your launch system auto-detects IP address for wireless operation."})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-gripper-operations",children:"\u270b Gripper Operations"}),"\n",(0,o.jsx)(n.p,{children:'The gripper is the "hand" of your robot, essential for object interaction:'}),"\n",(0,o.jsx)(n.h3,{id:"basic-gripper-commands",children:(0,o.jsx)(n.strong,{children:"Basic Gripper Commands"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Open gripper (prepare for pickup)\r\nmycobot.set_gripper_state(0, speed=70)\r\n\r\n# Close gripper (grasp object)\r\nmycobot.set_gripper_state(1, speed=70)\r\n\r\n# Partial grip (delicate objects)\r\nmycobot.set_gripper_value(500, speed=70)  # 0-1000 range\n"})}),"\n",(0,o.jsx)(n.h3,{id:"gripper-control-strategies",children:(0,o.jsx)(n.strong,{children:"Gripper Control Strategies"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Strategy"}),(0,o.jsx)(n.th,{children:"Use Case"}),(0,o.jsx)(n.th,{children:"Example"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Force Control"})}),(0,o.jsx)(n.td,{children:"Fragile objects"}),(0,o.jsx)(n.td,{children:"Eggs, glass, electronics"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Position Control"})}),(0,o.jsx)(n.td,{children:"Standard objects"}),(0,o.jsx)(n.td,{children:"Boxes, tools, bottles"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Adaptive Grip"})}),(0,o.jsx)(n.td,{children:"Unknown objects"}),(0,o.jsx)(n.td,{children:"Variable size/shape items"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"gripper-feedback",children:(0,o.jsx)(n.strong,{children:"Gripper Feedback"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Check if gripper is holding something\r\ndef is_gripping():\r\n    current_value = mycobot.get_gripper_value()\r\n    return current_value > 100  # Threshold for "holding"\r\n\r\n# Verify successful grasp\r\ndef verify_grasp():\r\n    if is_gripping():\r\n        print("\u2705 Object grasped successfully")\r\n        return True\r\n    else:\r\n        print("\u274c Grasp failed - object not detected")\r\n        return False\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-pick-and-place-workflow",children:"\ud83d\ude80 Pick and Place Workflow"}),"\n",(0,o.jsxs)(l.A,{children:[(0,o.jsxs)(a.A,{value:"sequence",label:"Complete Sequence",default:!0,children:[(0,o.jsx)(n.h3,{id:"full-pick-and-place-operation",children:(0,o.jsx)(n.strong,{children:"Full Pick and Place Operation"})}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Navigate to object"})," (using waypoint navigation or real-time detection)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Object detection"})," determines precise 3D pose of target"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Move arm to pre-grasp pose"})," (safe position above target)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Open gripper"})," (prepare for pickup)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Move down to grasp pose"})," (precise positioning)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Close gripper"})," (secure object)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lift object"})," (move to safe transport pose)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Navigate to drop location"})," (mobile base movement)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Move arm to drop pose"})," (position over target)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Open gripper"})," (release object)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Return arm to home position"})," (safe storage pose)"]}),"\n"]})]}),(0,o.jsx)(a.A,{value:"diagram",label:"Visual Workflow",children:(0,o.jsx)(n.mermaid,{value:"graph TD\r\n    Start([Start Mission]) --\x3e Nav1[Navigate to Object]\r\n    Nav1 --\x3e Detect[Object Detection]\r\n    Detect --\x3e Valid{Object<br/>Detected?}\r\n    \r\n    Valid --\x3e|Yes| PreGrasp[Move to Pre-Grasp]\r\n    Valid --\x3e|No| Search[Search Pattern]\r\n    Search --\x3e Detect\r\n    \r\n    PreGrasp --\x3e Open1[Open Gripper]\r\n    Open1 --\x3e Grasp[Move to Grasp Pose]\r\n    Grasp --\x3e Close[Close Gripper]\r\n    Close --\x3e Check{Grasp<br/>Success?}\r\n    \r\n    Check --\x3e|Yes| Lift[Lift Object]\r\n    Check --\x3e|No| Retry[Retry Grasp]\r\n    Retry --\x3e Open1\r\n    \r\n    Lift --\x3e Nav2[Navigate to Drop Zone]\r\n    Nav2 --\x3e Drop[Move to Drop Pose]\r\n    Drop --\x3e Open2[Open Gripper]\r\n    Open2 --\x3e Home[Return to Home]\r\n    Home --\x3e Complete([Mission Complete])"})}),(0,o.jsx)(a.A,{value:"code",label:"Implementation Example",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class PickAndPlaceController:\r\n    def __init__(self):\r\n        self.mycobot = MyCobot(\'/dev/ttyUSB0\', 115200)  # or WiFi\r\n        self.navigator = NavigationController()\r\n        self.detector = ObjectDetector()\r\n        \r\n    def execute_pick_and_place(self, object_type, drop_location):\r\n        try:\r\n            # Phase 1: Navigate and detect\r\n            object_pose = self.find_object(object_type)\r\n            if not object_pose:\r\n                return False, "Object not found"\r\n            \r\n            # Phase 2: Pick operation\r\n            success = self.pick_object(object_pose)\r\n            if not success:\r\n                return False, "Pick operation failed"\r\n            \r\n            # Phase 3: Transport and drop\r\n            self.navigator.go_to_pose(drop_location)\r\n            self.drop_object()\r\n            \r\n            return True, "Pick and place completed successfully"\r\n            \r\n        except Exception as e:\r\n            self.emergency_stop()\r\n            return False, f"Error: {str(e)}"\r\n    \r\n    def pick_object(self, object_pose):\r\n        # Safety pre-grasp approach\r\n        pre_grasp = [object_pose.x, object_pose.y, object_pose.z + 0.05, 0, 0, 0]\r\n        self.mycobot.send_coords(pre_grasp, speed=30)\r\n        time.sleep(2)\r\n        \r\n        # Open gripper\r\n        self.mycobot.set_gripper_state(0, speed=70)\r\n        time.sleep(1)\r\n        \r\n        # Move to grasp pose\r\n        grasp_pose = [object_pose.x, object_pose.y, object_pose.z, 0, 0, 0]\r\n        self.mycobot.send_coords(grasp_pose, speed=20)\r\n        time.sleep(2)\r\n        \r\n        # Close gripper\r\n        self.mycobot.set_gripper_state(1, speed=70)\r\n        time.sleep(1)\r\n        \r\n        # Verify grasp and lift\r\n        if self.verify_grasp():\r\n            lift_pose = [object_pose.x, object_pose.y, object_pose.z + 0.1, 0, 0, 0]\r\n            self.mycobot.send_coords(lift_pose, speed=30)\r\n            return True\r\n        else:\r\n            return False\n'})})})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-integration-with-system-components",children:"\ud83d\udd0c Integration with System Components"}),"\n",(0,o.jsx)(n.h3,{id:"how-manipulation-fits-in",children:(0,o.jsx)(n.strong,{children:"How Manipulation Fits In"})}),"\n",(0,o.jsx)(n.mermaid,{value:"flowchart LR\r\n    Mission[Mission Manager] --\x3e Pick[Pick Node]\r\n    Mission --\x3e Drop[Drop Node]\r\n    Mission --\x3e Nav[Navigation]\r\n    \r\n    Pick --\x3e Arm[MyCobot Arm]\r\n    Drop --\x3e Arm\r\n    Detection[Object Detection] --\x3e Pick\r\n    Detection --\x3e Drop\r\n    \r\n    Nav --\x3e Base[Mobile Base]\r\n    Arm --\x3e Gripper[Gripper Control]"}),"\n",(0,o.jsx)(n.h3,{id:"node-communication",children:(0,o.jsx)(n.strong,{children:"Node Communication"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Node"}),(0,o.jsx)(n.th,{children:"Publishes"}),(0,o.jsx)(n.th,{children:"Subscribes"}),(0,o.jsx)(n.th,{children:"Services"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Pick Node"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/arm/status"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/detected_objects"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/pick_object"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Drop Node"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/drop/status"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/target_location"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/drop_object"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Mission Manager"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/mission/status"})}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"/arm/status"}),", ",(0,o.jsx)(n.code,{children:"/nav/status"})]}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"/start_mission"})})]})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-configuration-and-calibration",children:"\ud83d\udee0\ufe0f Configuration and Calibration"}),"\n",(0,o.jsx)(n.h3,{id:"arm-workspace-definition",children:(0,o.jsx)(n.strong,{children:"Arm Workspace Definition"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# MyCobot 280 workspace limits\r\nWORKSPACE_LIMITS = {\r\n    'x_min': -280, 'x_max': 280,      # mm\r\n    'y_min': -280, 'y_max': 280,      # mm  \r\n    'z_min': -131, 'z_max': 412,      # mm\r\n    'reach_radius': 280               # mm\r\n}\r\n\r\ndef is_pose_reachable(target_pose):\r\n    distance = math.sqrt(target_pose.x**2 + target_pose.y**2)\r\n    return (WORKSPACE_LIMITS['x_min'] <= target_pose.x <= WORKSPACE_LIMITS['x_max'] and\r\n            WORKSPACE_LIMITS['y_min'] <= target_pose.y <= WORKSPACE_LIMITS['y_max'] and\r\n            WORKSPACE_LIMITS['z_min'] <= target_pose.z <= WORKSPACE_LIMITS['z_max'] and\r\n            distance <= WORKSPACE_LIMITS['reach_radius'])\n"})}),"\n",(0,o.jsx)(n.h3,{id:"safety-parameters",children:(0,o.jsx)(n.strong,{children:"Safety Parameters"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# manipulation_config.yaml\r\nmanipulation:\r\n  safety:\r\n    max_speed: 50          # 0-100 scale\r\n    approach_speed: 20     # Slower for precision\r\n    emergency_stop: true   # Enable e-stop\r\n    \r\n  timeouts:\r\n    move_timeout: 10.0     # seconds\r\n    grasp_timeout: 3.0     # seconds\r\n    \r\n  retry_policy:\r\n    max_attempts: 3\r\n    retry_delay: 1.0       # seconds\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-best-practices--troubleshooting",children:"\ud83d\udca1 Best Practices & Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"safety-guidelines",children:(0,o.jsx)(n.strong,{children:"Safety Guidelines"})}),"\n",(0,o.jsx)(t.A,{type:"warning",title:"Safety First!",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Always move to ",(0,o.jsx)(n.strong,{children:"pre-grasp poses"})," before attempting pickup"]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.strong,{children:"timeouts"})," and feedback to handle failures"]}),"\n",(0,o.jsxs)(n.li,{children:["Test sequences in ",(0,o.jsx)(n.strong,{children:"simulation"}),' or with arm "in the air" first']}),"\n",(0,o.jsxs)(n.li,{children:["Ensure arm is at ",(0,o.jsx)(n.strong,{children:"home position"})," before/after sessions"]}),"\n"]})}),"\n",(0,o.jsx)(n.h3,{id:"common-issues--solutions",children:(0,o.jsx)(n.strong,{children:"Common Issues & Solutions"})}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["\ud83d\udd27 ",(0,o.jsx)(n.strong,{children:"Arm Won't Move"})]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Possible causes:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Power/connection issues"}),"\n",(0,o.jsx)(n.li,{children:"Joint limits exceeded"}),"\n",(0,o.jsx)(n.li,{children:"Emergency stop activated"}),"\n"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions:"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Check connection\r\nif mycobot.is_controller_connected():\r\n    print("\u2705 Controller connected")\r\nelse:\r\n    print("\u274c Connection failed")\r\n    \r\n# Reset arm position\r\nmycobot.send_angles([0, 0, 0, 0, 0, 0], speed=30)\r\n\r\n# Clear any error states\r\nmycobot.release_all_servos()\r\ntime.sleep(1)\r\nmycobot.power_on()\n'})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["\ud83e\udd0f ",(0,o.jsx)(n.strong,{children:"Grasp Failures"})]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Common causes:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Object too small/large for gripper"}),"\n",(0,o.jsx)(n.li,{children:"Incorrect approach angle"}),"\n",(0,o.jsx)(n.li,{children:"Object slipping during pickup"}),"\n"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Improvements:"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Adaptive grasp strategy\r\ndef adaptive_grasp(object_size):\r\n    if object_size < 20:  # Small objects\r\n        gripper_value = 200\r\n        approach_speed = 10\r\n    elif object_size > 50:  # Large objects\r\n        gripper_value = 800\r\n        approach_speed = 30\r\n    else:  # Medium objects\r\n        gripper_value = 500\r\n        approach_speed = 20\r\n    \r\n    mycobot.set_gripper_value(gripper_value, speed=70)\n"})})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)("summary",{children:["\u26a1 ",(0,o.jsx)(n.strong,{children:"Performance Optimization"})]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Speed up operations:"})}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pre-plan common poses"})," for faster execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use joint space"})," for non-critical movements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optimize gripper timing"})," based on object type"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Parallel processing"})," where safe (navigation + arm planning)"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Pre-defined poses for efficiency\r\nCOMMON_POSES = {\r\n    'home': [0, 0, 0, 0, 0, 0],\r\n    'ready': [0, -45, 45, 0, 0, 0],\r\n    'scan': [0, -30, 30, 0, -60, 0]\r\n}\r\n\r\ndef quick_move_to_pose(pose_name):\r\n    if pose_name in COMMON_POSES:\r\n        mycobot.send_angles(COMMON_POSES[pose_name], speed=50)\r\n    else:\r\n        print(f\"Unknown pose: {pose_name}\")\n"})})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-advanced-manipulation-features",children:"\ud83c\udfaf Advanced Manipulation Features"}),"\n",(0,o.jsx)(n.h3,{id:"vision-guided-grasping",children:(0,o.jsx)(n.strong,{children:"Vision-Guided Grasping"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def vision_guided_pick(self, object_class):\r\n    # Get object pose from camera\r\n    detection = self.object_detector.detect(object_class)\r\n    \r\n    if detection:\r\n        # Convert camera coordinates to arm coordinates\r\n        arm_pose = self.transform_pose(detection.pose)\r\n        \r\n        # Adjust for object orientation\r\n        grasp_angle = self.calculate_grasp_angle(detection.orientation)\r\n        arm_pose.rotation = grasp_angle\r\n        \r\n        return self.pick_object(arm_pose)\r\n    return False\n"})}),"\n",(0,o.jsx)(n.h3,{id:"collaborative-operation",children:(0,o.jsx)(n.strong,{children:"Collaborative Operation"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class CollaborativeManipulation:\r\n    def __init__(self):\r\n        self.human_detector = HumanDetector()\r\n        self.safety_zone = SafetyZone(radius=0.5)  # 50cm safety buffer\r\n        \r\n    def safe_manipulation(self, target_pose):\r\n        if self.human_detector.human_in_workspace():\r\n            self.pause_and_wait()\r\n        else:\r\n            self.execute_manipulation(target_pose)\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-learn-more",children:"\ud83d\udcda Learn More"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.elephantrobotics.com/docs/gitbook-en/",children:"MyCobot Official Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://moveit.picknik.ai/humble/index.html",children:"ROS2 Manipulation Tutorials"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://moveit.ros.org/",children:"MoveIt2 Motion Planning"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://robotics.northwestern.edu/documents/Grasping.pdf",children:"Robotic Grasping Fundamentals"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-next-steps",children:"\ud83c\udfaf Next Steps"}),"\n",(0,o.jsxs)(t.A,{type:"note",title:"Ready for Integration?",children:[(0,o.jsx)(n.p,{children:"Now that you understand manipulation basics:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Implementation:"})," ",(0,o.jsx)(n.a,{href:"/limo_cobot_documentation/docs/system-components/pick-node",children:"Pick & Drop Nodes"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Integration:"})," ",(0,o.jsx)(n.a,{href:"/limo_cobot_documentation/docs/core-concepts/system-integration",children:"System Integration"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Advanced:"})," ",(0,o.jsx)(n.a,{href:"/limo_cobot_documentation/docs/advanced-usage/custom-objects",children:"Custom Object Detection"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Troubleshooting:"})," ",(0,o.jsx)(n.a,{href:"/limo_cobot_documentation/docs/troubleshooting/common-errors",children:"Manipulation Issues"})]}),"\n"]})]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}}}]);